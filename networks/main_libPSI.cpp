/*
This is an autogenerated file, generated using the EzPC compiler.
Then hand crafted by Wen-jie Lu
*/

#include <iostream>

#include "library_fixed.h"

#include <cryptoTools/Network/IOService.h>
#include <cryptoTools/Network/Session.h>
#include <cryptoTools/Network/Channel.h>
#include "libOTe/NChooseOne/Kkrt/KkrtNcoOtReceiver.h"
#include "libOTe/NChooseOne/Kkrt/KkrtNcoOtSender.h"
#include "libPSI/PSI/Kkrt/KkrtPsiReceiver.h"
#include "libPSI/PSI/Kkrt/KkrtPsiSender.h"

using namespace std;

int party = 0;
int port = 32000;
string address = "127.0.0.1";
int num_threads = 1;
int32_t bitlength = 41;
int32_t kScale = 12;
int32_t kDoExtractTruncate = 1;

oc::u64 setSize = 1 << 20;
oc::u8 dummy[1];

void kkrtSend() {
  oc::IOService ios(0);
  oc::EpMode m = oc::EpMode::Server;
  oc::Session ep(ios, "127.0.0.1:12122", m);
  oc::Channel chl = ep.addChannel();

  std::vector<oc::block> set(setSize);
  oc::PRNG prng(_mm_set_epi32(4253465, 3434565, 234435, 23987045));
  prng.get(set.data(), set.size());

  oc::KkrtNcoOtSender otSend;
  oc::KkrtPsiSender sendPSIs;

  chl.asyncSend(dummy, 1);
  chl.recv(dummy, 1);

  sendPSIs.init(setSize, setSize, 40, chl, otSend, prng.get<oc::block>());

  sendPSIs.sendInput(set, chl);
}

void kkrtRecv() {
  oc::IOService ios(0);
  oc::EpMode m = oc::EpMode::Client;
  oc::Session ep(ios, "127.0.0.1:12122", m);
  oc::Channel chl = ep.addChannel();

  std::vector<oc::block> set(setSize);
  oc::PRNG prng(_mm_set_epi32(4253465, 3434565, 234435, 23987045));
  prng.get(set.data(), set.size());

  oc::KkrtNcoOtReceiver otRecv;
  oc::KkrtPsiReceiver recvPSIs;

  chl.recv(dummy, 1);
  chl.asyncSend(dummy, 1);

  oc::Timer timer;
  auto start = timer.setTimePoint("start");

  recvPSIs.init(setSize, setSize, 40, chl, otRecv, prng.get<oc::block>());

  auto mid = timer.setTimePoint("init");

  recvPSIs.sendInput(set, chl);

  auto end = timer.setTimePoint("done");

  auto offlineTime = std::chrono::duration_cast<std::chrono::milliseconds>(mid - start).count();
  auto onlineTime = std::chrono::duration_cast<std::chrono::milliseconds>(end - mid).count();

  cout << recvPSIs.mIntersection.size() << endl;
  cout << offlineTime << endl;
  cout << onlineTime << endl;
}

int main(int argc, char **argv) {
  ArgMapping amap;

  amap.arg("r", party, "Role of party: ALICE/SERVER = 1; BOB/CLIENT = 2");
  amap.arg("p", port, "Port Number");
  amap.arg("ip", address, "IP Address of server (ALICE)");
  amap.arg("nt", num_threads, "Number of Threads");
  amap.arg("ell", bitlength, "Uniform Bitwidth");
  amap.arg("k", kScale, "bits of scale");
  amap.parse(argc, argv);

  assert(party == SERVER || party == CLIENT);

  initialize();

  if (party == SERVER) kkrtSend();
  else kkrtRecv();
}
